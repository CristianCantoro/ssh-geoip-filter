#!/usr/bin/env bash
##############################################################################
# This scripts is based on the following:
#   * https://gist.github.com/jokey2k/a74f56955124880749e7
#   * http://www.axllent.org/docs/view/ssh-geoip
##############################################################################

# Enhanced bash strict mode
# https://balist.es/blog/2017/03/21/enhancing-the-unofficial-bash-strict-mode/
# shellcheck disable=SC2128
SOURCED=false && [ "$0" = "$BASH_SOURCE" ] || SOURCED=true

if ! $SOURCED; then
  set -euo pipefail
  IFS=$'\n\t'
fi

#################### Utils
function check_file() {
  local myfile="$1"
  local option="$2"

  if [[ ! -e "$myfile" ]]; then
    (>&2 echo "Error in option '$option': $myfile is not a valid file.")
    exit 1
  fi

}
####################

#################### Usage
function short_usage() {
  (>&2 echo \
"Usage:
  sshfilter [options] [-c <config>] <ip>
  sshfilter -h")
}

function usage() {
  short_usage
  (>&2 echo \
"
Filter a connection based on the IP address geolocation.

Arguments:
  <ip>          IP address to geolocate and (eventually) filter.

Options:
  -d            Print debug information.
  -c <config>   Configuration file [default: /etc/sshfilter.conf]
  -v            Print log information on console.
  -h            Show this help and exits.

Example:
  sshfilter 8.8.8.8")
}
####################

#################### Logging
debug=false
verbose=false

config='/etc/sshfilter.conf'
while getopts ":c:dhv" opt; do
  case $opt in
    c)
      check_file "$OPTARG" '-c'
      config="$OPTARG"
      ;;
    d)
      debug=true
      ;;
    h)
      usage
      exit 0
      ;;
    v)
      verbose=true
      ;;
    \?)
      (>&2 echo "Error: invalid option $1")
      usage
      exit 1
      ;;
    :)
      (>&2 echo "Error.Option -$OPTARG requires an argument.")
      exit 1
      ;;
  esac
done

if $verbose; then
  function echoverbose() {
    (>&2 echo -en "[$(date '+%F_%k:%M:%S')][info]\\t" )
    (>&2 echo "$@" )
  }
else
  function echoverbose() { true; }
fi
####################

#################### Configuration
# shellcheck disable=SC1090,SC1091
source "$config"

if [ -z "${ALLOW_COUNTRIES+x}" ]; then
  (>&2 echo "Error: variable ALLOW_COUNTRIES is not set")
  exit 1
fi

if [ -z "${LOG_FACILITY+x}" ]; then
  (>&2 echo "Error: variable LOG_FACILITY is not set")
  exit 1
fi
set -u
####################

if $debug; then  set -x; fi

if (( "$#"-OPTIND < 0 )) ; then
  (>&2 echo "Error. Argument <ip> is required.")
  short_usage
  exit 1
fi

# shift optional parameters
shift $(( OPTIND - 1 ))
ip="$1"

# deny connections by default
response='DENY'

# if ALLOW_IPS is set
if [ -n "${ALLOW_IPS+x}" ]; then
  # check IP
  [[ $ALLOW_IPS =~ $1 ]] && response='ALLOW' || response='DENY'
fi

if [[ "$response" != 'ALLOW' ]]; then
  if [[ "$(echo "$ip" | grep ':')" != "" ]] ; then
    country="$(/usr/bin/geoiplookup6 "$1"  | \
                awk -F ": " '{ print $2 }' | \
                awk -F "," '{ print $1 }'  | \
                head -n 1)"
  else
    country="$(/usr/bin/geoiplookup "$ip"   | \
                awk -F ": " '{ print $2 }' | \
                awk -F "," '{ print $1 }'  | \
                head -n 1)"
  fi

  # check country
  [[ $country = 'IP Address not found' || $ALLOW_COUNTRIES =~ $country ]] \
    && response='ALLOW' || response='DENY'

  msg="$response sshd connection from $ip ($country)"
else
  msg="$response sshd connection from $ip, whitelisted IP"
fi

logger -p "$LOG_FACILITY" "$msg"
echoverbose "$msg"

if [[ "$response" == 'ALLOW' ]] ; then
  exit 0
else
  exit 1
fi
